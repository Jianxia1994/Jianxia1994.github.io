<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>日成一寸，累之可至千里</title>
    <link>https://Jianxia1994.github.io/</link>
    <description>Recent content on 日成一寸，累之可至千里</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="https://Jianxia1994.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://Jianxia1994.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://Jianxia1994.github.io/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>open-falcon初识</title>
      <link>https://Jianxia1994.github.io/post/open-falcon%E5%88%9D%E8%AF%86/</link>
      <pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://Jianxia1994.github.io/post/open-falcon%E5%88%9D%E8%AF%86/</guid>
      
        <description>

&lt;h2 id=&#34;优点&#34;&gt;优点&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;自动发现比较好用，支持用户主动push，时间序列数据存储&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;水平扩展能力好&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;告警配置较为方便，支持callback调用&lt;/li&gt;
&lt;li&gt;主机、metric等的层级更灵活&lt;/li&gt;
&lt;li&gt;多维度数据展示、用户可以自定义screen&lt;/li&gt;
&lt;li&gt;高可用比zabbix好很多，整个系统没有核心单点，可水平扩展&lt;/li&gt;
&lt;li&gt;后端全部golang，portal和dashboard 为python，适合运维进行二次开发（对比zabbix的php和C）&lt;/li&gt;
&lt;li&gt;针对各个开源软件都有自己的监控插件，比zabbix全面的多，如果没有响应的插件，自己开发也比较容易。插件是独立于agent进程的，安装新插件不需要重启agent&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&#34;总之-open-falcon不是一个监控软件-而是一个运维框架-只要把数据整合成标准的形式就可以接收和配置告警-收数据有点类似于prometheus-但是他的告警又远远优于prometheus&#34;&gt;总之，open-falcon不是一个监控软件，而是一个运维框架，只要把数据整合成标准的形式就可以接收和配置告警，收数据有点类似于prometheus，但是他的告警又远远优于prometheus&lt;/h6&gt;

&lt;h2 id=&#34;组件&#34;&gt;组件&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;agent&lt;br /&gt;
监控客户端，相当于zabbix_agent，默认自带了很多监控项不需要配置，同时还提供接口供自定义脚本上报数据
支持自发现，自定义监控指标通过HBS获取
每隔60s通过agent与transfer建立的长连接吧数据push给transfer，数据发送速度快&lt;/li&gt;
&lt;li&gt;Aggregater 集群聚合模块&lt;br /&gt;
聚合集群下所有机器的某个指标的值，比如所有机器的qps才是整个集群的qps，平均的某个值才是集群的某个值，计算完成后push回server端。&lt;/li&gt;
&lt;li&gt;hbs（heartbeat server）&lt;br /&gt;
agent每分钟发一次心跳信息给hbs，同时会带上hostname、ip、agent version、plugin version等信息&lt;/li&gt;
&lt;li&gt;portal&lt;br /&gt;
配置报警策略，hbs读取数据库中的策略传给agent&lt;/li&gt;
&lt;li&gt;transfer&lt;br /&gt;
数据转发服务，收到agent上报的数据后，按照哈希规则分片，将分片后的数据分别push给judge和graph&lt;/li&gt;
&lt;li&gt;judge&lt;br /&gt;
告警判断，agent数据传给transfer，transfer给graph绘图，同时给judge判断是否触发告警&lt;/li&gt;
&lt;li&gt;alarm&lt;br /&gt;
judge产生的报警event写入redis，alarm从redis中读取处理&lt;/li&gt;
&lt;li&gt;graph&lt;br /&gt;
存储绘图数据。接收transfer推送的监控数据，也处理query的查询请求，返回绘图数据&lt;/li&gt;
&lt;li&gt;query&lt;br /&gt;
提供统一的绘图数据查询入口。query组件接收查询请求，根据一致性哈希去响应的graph实例查询不同metric的数据，汇总数据返回给用户&lt;/li&gt;
&lt;li&gt;dashbord&lt;br /&gt;
查询和配置界面&lt;/li&gt;
&lt;li&gt;nodata&lt;br /&gt;
检测数据异常，与judge协同工作。配置了nodata的metric在数据缺失的情况下，会自动生成默认模拟数据，供judge检测，使告警更健壮&lt;/li&gt;
&lt;li&gt;task&lt;br /&gt;
定时任务。index更新，包括图表索引的全量更新和垃圾索引清理。falcon服务组件的自身状态收集，falcon自监控任务。&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
  </channel>
</rss>